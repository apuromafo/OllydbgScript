// Author:
// SmilingWolf+Apuromafo CLS
//
// Script version:
// 1.2
//
// Supported Arma versions:
// 3.70 all the way up to 9.64
//
// Supported protection options:
// Minimal
// Standard
// Standard+DebugBlocker
// DebugBlocker+CopyMemII
//
// Combined with:
// Import Table Elimination
// Strategic Code Splicing
// Memory-Patching Protections
//
// Extra:
// Standard HWID Replacement
// Enhanced HWID Replacement (v5.00+)
// Password Protection Bypass
// Log the VAs of the sections to keep
// If UPX had been used the script will deal with it too
//
// Author's Notes:
// I have coded this with EXEs in mind (and at my disposal), which means
// that DLL support is little to nonexistent.
//
// Standard HWID Replacement works a bit weird with Arma < v5.0:
// the registration dialog will display your system's HWID, but if you input
// a valid key created using the fake HWID it will magically be accepted :)
//
// The "Sections to keep" thing is not an Holy Grail, it doesn't take into account
// other factors that might force you to keep a particular section.
// Always be careful when touching the sections of an executable, if you don't
// know what you are doing just leave it as it is.
//
// Sometimes Olly might freeze while we are inside the iatrebuild proc:
// this happens because all the threads have been suspended. The problem
// is kinda random and can be fixed simply by resuming all the threads
// (you can use "Resume all Threads" in the Threads window if you have
// either ScyllaHide (recommended) or StrongOD installed).
//
// Thanks a lot to:
// GIV for testing (lots of bugs fixed thanks to him!)
// Mr. eXoDia for a combo of fixes that made this script considerably less retarded
// Ghandi, Mr. eXoDia and everyone who has shared their Arma unpacking techniques
// Nacho_dj / ARTeam for ARImpRec.dll
// Everyone who has contributed by sending me different Armadillo versions to play with
// Bloody hell, I'm forgetting someone, I already know... well thanks to The Forgotten Ones too :)
//
///////////////////////////////////////////////////////////////////////////////////////////////////

lc
lclr
bc
bphwc

call setvars
call IsEXEorDLL
call getpdata

pause

// 00000000 means no change, everything else will be considered the new HWID
mov fakehwid, 00000000

// 0 = Fast Password Bypass (no user interaction required) (Default)
// 1 = "Slow" Password Bypass (can log correct password's JAMCRC and CRC32)
// Requires you to enter something in the textbox and then hit OK.
mov passbypass_method, 0

// This has proven to be troublesome in some cases (MASM unpackmes, IAT Elimination enabled, DLLs...)
// Set this one to 0 if you have some kind of problem with the minimized exe
// 0 = Don't Minimize Exe (Default)
// 1 = Minimize Exe
mov minimizeexe_userchoice, 0

// Select the preferred method to dump the CodeSplices
// 0 = Redirect the CS to the .pdata section (Default);
// 1 = Don't redirect, dump the memory region where the CS will be written by Arma
mov splicesdump_method, 0

// 00000000 Special APP copymew2  
//0 Disabled 
//1 Enabled
mov special, 1

// Set this to the directory of the ARImpRec DLL
mov arimprecpath, "C:\Armascripts\ARImpRec.dll"


gmi eip, PATH
mov exepath, $RESULT
len exepath         // length of path+name+".exe" (full path)
sub $RESULT, 4      // length of path+name
mov basepath, exepath, $RESULT

alloc 1000
mov tmp, $RESULT
mov [tmp], arimprecpath
exec
 pushad
 pushfd
 push {tmp}
 call {LoadLibraryA}
 popfd
 popad
ende
free tmp

bp OpenMutexA

// Debug-Blocker
 erun
 bc OpenMutexA
 mov mutexaddr, [esp+0C]
 exec
  pushad
  pushfd
  push {mutexaddr}
  push 0
  push 0
  call {CreateMutexA}
  popfd
  popad
 ende
 bphws VirtualProtect
 bphws GetEnvironmentVariableA

GoddamnWinInet:
 erun

 cmp eip, GetEnvironmentVariableA
 je Is_RS
 mov param1, [esp]
 cmp param1, modulebase
 jb GoddamnWinInet
 gmi modulebase, MODULESIZE
 mov tmp, $RESULT
 add tmp, modulebase
 cmp param1, tmp
 jg GoddamnWinInet

FindSecurityDll:
 bphwc VirtualProtect
 mov tmp, esp
 add tmp, 4
 mov tmp, [tmp]
 mov securitydllstart, tmp
 gmemi securitydllstart, MEMORYSIZE
 add tmp, $RESULT
 mov securitydllend, tmp
 run

// CopyMemII crash
Is_RS:
 mov tmp, esp
 add tmp, 4
 gstr [tmp]
 scmp $RESULT, "_RS"
 je RSBuffFill
 jmp GoddamnWinInet

RSBuffFill:
 mov tmp, [esp+8]
 mov [tmp], #31333337#, 4
 bphwc GetEnvironmentVariableA

 bphws MapViewOfFile, "x"
 run
 mov tmp, [esp]
 bp tmp
 run
 bc tmp
 bphwc MapViewOfFile
 alloc 1000
 mov eax, $RESULT

ToTheRedirectionFix:
 bphwc
 bc
 call changehwid

 bphws CreateDialogIndirectParamA
 bphws CreateDialogIndirectParamW

findsplices:
 bphws VirtualProtect
 bphws VirtualAlloc
 erun
 ifeq eip, CreateDialogIndirectParamA
  call PWLogNBypass
 endif
 ifeq eip, CreateDialogIndirectParamW
  call PWLogNBypass
 endif
 call checksplices
 cmp eip, VirtualProtect
 je exitfindsplices
 jmp findsplices

exitfindsplices:
 mov tmp, esp
 add tmp, 4
 mov codesection, [tmp]
 bphwc CreateDialogIndirectParamA
 bphwc CreateDialogIndirectParamW
 bphwc VirtualAlloc
 bphws LoadLibraryA

 alloc 1000
 mov SectionsTable, $RESULT
 mov param1, $RESULT
 eval "SectionsTable stored at: {SectionsTable}"
 log $RESULT, ""

GetRealSections:
 inc RealSectionsNumber
 mov tmp, esp
 add tmp, 4
 mov [param1], [tmp]    // Section Address
 add param1, 4
 run
 cmp eip, VirtualProtect
 jne APIRedir
 run
 cmp eip, VirtualProtect
 jne APIRedir
 jmp GetRealSections

APIRedir:
 bphwc VirtualProtect
 bphwc LoadLibraryA

 mov tmp, ebp
 add tmp, 4
 bp [tmp]
 run
 bc eip

// API Redirection
 mov tmp, securitydllstart

 ArmAccessLoop:
 find tmp, #41726D416363657373#
 cmp $RESULT, 0
 je EndArmAccessLoop
 mov tmp, $RESULT
 mov [tmp], #77#
 jmp ArmAccessLoop

 EndArmAccessLoop:
 find eip, #6800010000#
 find $RESULT, #E8????????83C40C#
 gci $RESULT, DESTINATION
 mov param1, $RESULT
 asm param1, "RETN" // Prevent standard API redirection

// CopyMemII
 find securitydllstart, #4C6F636174696F6E20435047# // "Location CPG"
 mov locationcpg, $RESULT
 eval "'Location CPG' string found at: {$RESULT}"
 log $RESULT, ""
 mov tmp, locationcpg
 buf tmp
 mov pushlocation, #68#+tmp

Find:
 find eip, pushlocation
 cmp $RESULT, 0
 jne Found
 find eip, #EBCA#
 bphws $RESULT+2
 run
 bphwc eip
 jmp Find

Found:
 eval "CopyMemII decryption routine found in code below: {eip}"
 log $RESULT, ""

 find eip, #83BD????????000F84????????83BD#
cmp special,1
je rutina2

 bp $RESULT+7
 run
 bc eip

 asm param1, "PUSH EBP" // Fix our leftovers

 mov importdestruction, !zf
 mov tmp, eip
 mov !zf, 0
 sto
 sto
 mov !zf, 0
 find eip, #6A00#
 bp $RESULT-2
 run
 bc eip
 cmp !zf, 1
 je ExitCopyMemII

 find eip, #5?E8#
 bp $RESULT+1
 run
 bc eip

 // Sometimes CopyMemII eats the first 1000h bytes of the section following the codesection.
 // Let's just save those bytes and restore them at the end of the CopyMemII routine.
rutina2:
 alloc 1000
 mov param1, $RESULT
 mov param2, codesection
 gmemi param2, MEMORYSIZE
 add param2, $RESULT
 memcpy param1, param2, 1000

 sto
 sto

 // Copy the buffer back to its place and free the memory
 memcpy param2, param1, 1000
 free param1
cmp special,1
je ToTheOEP

 cmp importdestruction, 0
 je AntiImpDes // IAT Elimination has been enabled

ExitCopyMemII:
 cmp importdestruction, 0
 je AntiImpDes // IAT Elimination has been enabled, but protection has been set to "Minimal"
 mov eip, tmp
 mov !zf, 1
 jmp ToTheOEP

AntiImpDes:
 find eip, #6A01#
 bp $RESULT-2
 run
 bc eip
 mov !zf, 1

ToTheOEP:
 bp CreateEventA

 run
 rtr
 sti

ShowMustGoOn:
 bc CreateEventA
 rtr
 sti
 cmp IS_DLL, 1
 je DLL_OEP
 jmp OEPCALL_bp

DLL_OEP:
 // Patterns courtesy of GIV
 find eip, #E9????????#
 repl $RESULT, #E9????????#, #9090909090#, 5
 find eip, #EB??8???0883??017???#
 repl $RESULT, #EB??8???0883??017???#, #90909090909090909090#, A

OEPCALL_bp:
 findop eip, #FFD?#
 bp $RESULT
 inc $RESULT
 findop $RESULT, #FFD?#
 bp $RESULT

isUPX:
 run
 bc
 sti
 opcode eip
 cmp $RESULT_1, "PUSHAD"
 jne End
 call vpfullaccess
 sto
 bphws esp, "r"
 run
 bphwc
 find eip, #83EC80E9????????00#
 bp $RESULT+3
 run
 bc
 sto
 an eip

End:
 bphwc
 bpmc
 bc
 call splicesdump
 cmt eip, "<--- OEP found by SmilingWolf"

 call vpfullaccess
 call fixiateliminfo
 call dumpexe

 call minimizeexe

 call iatrebuild

 call FixpdataAccess

 call emitlog
ret

setvars:
 var OpenMutexA
 var CreateMutexA
 var GetEnvironmentVariableA
 var VirtualProtect
 var GetSystemInfo
 var LoadLibraryA
 var CreateEventA
 var RtlAllocateHeap
 var SetEnvironmentVariableA
 var VirtualAlloc
 var CreateFileA
 var CreateFileMappingA
 var MapViewOfFile
 var UnmapViewOfFile
 var CloseHandle
 var CreateDialogIndirectParamA
 var CreateDialogIndirectParamW
 var GetWindowTextA
 var SetPropA

 var modulebase
 var PEOffset
 var IS_DLL
 var ext
 var mutexaddr
 var codesection
 var endcodesection
 var securitydllstart
 var securitydllend
 var seedaddress
 var splicesaddress
 var splicessize
 var pdataaddress
 var pushlocation
 var fakehwid
 var locationes1
 var locationcpg
 var importdestruction
 var oldelfanew
 var arimprecpath
 var memarea
 var exepath
 var basepath
 var exeforiat
 var param1
 var param2
 var param3
 var pid
 var tmp
 var counter
 var backupbytes
 var HWIDEIP
 var HWIDChanged
 var SectionsTable
 var RealSectionsNumber
 var AttrOffset
 var CorrectJAMCRC
 var CorrectCRC32
 var passbypass_method
 var passwordused
var special

 gpa "OpenMutexA", "kernel32.dll"
 mov OpenMutexA, $RESULT
 gpa "CreateMutexA", "kernel32.dll"
 mov CreateMutexA, $RESULT
 gpa "GetEnvironmentVariableA", "kernel32.dll"
 mov GetEnvironmentVariableA, $RESULT
 gpa "VirtualProtect", "kernel32.dll"
 mov VirtualProtect, $RESULT
 gpa "GetSystemInfo", "kernel32.dll"
 mov GetSystemInfo, $RESULT
 gpa "LoadLibraryA", "kernel32.dll"
 mov LoadLibraryA, $RESULT
 gpa "CreateEventA", "kernel32.dll"
 mov CreateEventA, $RESULT
 gpa "SetEnvironmentVariableA", "kernel32.dll"
 mov SetEnvironmentVariableA, $RESULT
 gpa "VirtualAlloc", "kernel32.dll"
 mov VirtualAlloc, $RESULT
 gpa "RtlAllocateHeap", "ntdll.dll"
 mov RtlAllocateHeap, $RESULT
 gpa "CreateFileA", "kernel32.dll"
 mov CreateFileA, $RESULT
 gpa "CreateFileMappingA", "kernel32.dll"
 mov CreateFileMappingA, $RESULT
 gpa "MapViewOfFile", "kernel32.dll"
 mov MapViewOfFile, $RESULT
 gpa "UnmapViewOfFile", "kernel32.dll"
 mov UnmapViewOfFile, $RESULT
 gpa "CloseHandle", "kernel32.dll"
 mov CloseHandle, $RESULT
 gpa "CreateDialogIndirectParamA", "user32.dll"
 mov CreateDialogIndirectParamA, $RESULT
 gpa "CreateDialogIndirectParamW", "user32.dll"
 mov CreateDialogIndirectParamW, $RESULT
 gpa "GetWindowTextA", "user32.dll"
 mov GetWindowTextA, $RESULT
 gpa "SetPropA", "user32.dll"
 mov SetPropA, $RESULT
ret

IsEXEorDLL:
 gmi eip, MODULEBASE
 mov modulebase, $RESULT, 4
 mov tmp, modulebase
 add tmp, 3C        // e_lfanew
 mov PEOffset, [tmp], 4 // Start of PE Header
 add PEOffset, modulebase
 mov tmp, PEOffset
 add tmp, 16    // Characteristics
 mov tmp, [tmp], 2
 shr tmp, 0D
 cmp tmp, 1
 je IS_DLL
 mov IS_DLL, 0
 mov ext, "exe"
 jmp end
 IS_DLL:
 mov IS_DLL, 1
 mov ext, "dll"
end:
ret

getpdata:
 gmi eip, NSECT
 sub $RESULT, 1 // This way we SHOULD get the address of the .pdata section
 mov tmp, $RESULT
 gmi eip, MODULEBASE
 mov param1, $RESULT
findpdata:
 gmemi param1, MEMORYSIZE
 add param1, $RESULT
 sub tmp, 1
 cmp tmp, 0
 jg findpdata
 add param1, $RESULT
 gmemi param1, MEMORYBASE
 mov pdataaddress, $RESULT
ret

checksplices:
 cmp eip, VirtualAlloc
 je chechretaddr_notlower
 ret
chechretaddr_notlower:
 mov tmp, esp
 mov tmp, [tmp]
 cmp tmp, securitydllstart
 ja chechretaddr_nothigher
 ret
chechretaddr_nothigher:
 cmp tmp, securitydllend
 jl checkparam_address
 ret
checkparam_address:
 mov tmp, esp
 add tmp, 4
 cmp [tmp], 0
 jg checkparam_allocationtype
 erun
checkparam_allocationtype:
 mov tmp, esp
 add tmp, 0C
 cmp [tmp], 1000 // MEM_COMMIT
 je saveaddress
 rtr
 sti
 ret
saveaddress:
 mov tmp, esp
 add tmp, 8
 mov splicessize, [tmp]
 // Arma adds 10000 to the amount of memory to allocate.
 // Just sub them to get the real size of the CS.
 // This appears to be have been a constant ever since (at least) Arma 4.30
 sub splicessize, 10000
 rtr
 sti
 cmp splicesdump_method, 1
 je cs_noredirect
 mov eax, pdataaddress  // Redirect the CS to the .pdata section
cs_noredirect:
 mov splicesaddress, eax
 eval "Code Splices in memory section: {splicesaddress}"
 log $RESULT, ""
 eval "Code Splices exact size: {splicessize}"
 log $RESULT, ""
 bphwc eip
ret

changehwid:
 cmp fakehwid, 00000000
 jne donealready
ret
donealready:
 cmp HWIDChanged, 1
 jne changeit
ret
changeit:
 mov counter, 3
 bp GetSystemInfo
 run
 bc GetSystemInfo
 bp [esp]
 erun
 bc eip
 findop eip, #C3#
 bp $RESULT
depth_2:
 run
 dec counter
 cmp counter, 0
 je depth_1
 jmp depth_2
depth_1:
 bc eip
 sto
 rtr
 sto
depth_0:
 mov eax, fakehwid
 mov backupbytes, [eip-5], 5
 mov HWIDEIP, eip
 sub HWIDEIP, 5
 alloc 1000
 mov tmp, $RESULT
 eval "mov eax, {fakehwid}"
 asm tmp, $RESULT
 asm tmp+6, "ret"
 eval "call {tmp}"
 asm eip-5, $RESULT
 rtr
 sto
out:
 rtr
 free tmp
 mov [HWIDEIP], backupbytes, 5
 mov HWIDChanged, 1
ret

splicesdump:
 cmp splicesaddress, 0
 jg splicesddump_step2
ret
splicesddump_step2:
 cmp splicesdump_method, 1
 je splicesddump_allgreen
ret
splicesddump_allgreen:
 gmi eip, MODULEBASE
 mov tmp, splicesaddress
 sub tmp, $RESULT
 eval "splices_VA_{splicesaddress}_RVA_{tmp}.dmp"
 dm splicesaddress, splicessize, $RESULT
ret

fixiateliminfo:
 cmp importdestruction, 0
 je gatherinfo
 ret
gatherinfo:
 gpi PROCESSID
 mov pid, $RESULT
 gmemi codesection, MEMORYSIZE
 mov endcodesection, codesection
 add endcodesection, $RESULT
 sub endcodesection, 1
 mov tmp, pdataaddress
 ife splicesdump_method, 0
  add tmp, splicessize  // splicessize is automatically 0 if no splices were found
 endif
 eval "IAT Elimination was enabled!!!\r\n\r\nFill Universal Import Fixer with these infos:"
 eval "{$RESULT}\r\n\r\nProcess ID: {pid}\r\nCode Start: {codesection}\r\nCode End: {endcodesection}\r\nNew IAT VA: {tmp}\r\n\r\nFix everything, then press OK"
 msg $RESULT
ret

// ARImpRec copies the PE header from disk, so we have to modify the file AFTER the IAT has been fixed.
// Open the dumped file, map it in memory (for easier access) and update the header there.
FixpdataAccess:
 cmp splicesaddress, 0
 jg FixpdataAccess_step2
ret
FixpdataAccess_step2:
 cmp splicesdump_method, 0
 je FixItForReal
ret
FixItForReal:
 mov tmp, PEOffset
 add tmp, 0F8   // Reach the first section header
 mov param1, pdataaddress
 gmi eip, MODULEBASE
 sub param1, $RESULT    // Get RVA of .pdata
WalkMore:
 add tmp, 0C
 cmp [tmp], param1
 je FixAttributes
 add tmp, 1C
 jmp WalkMore
FixAttributes:
 add tmp, 18
 gmi eip, MODULEBASE
 sub tmp, $RESULT
 mov AttrOffset, tmp
 alloc 1000
 mov param1, $RESULT
 mov [param1], #609CE800000000586A0068800000006A036A006A0068000000C083C06850B800000000FFD0506A006A006A006A046A0050B800000000FFD0506A006A006A00681F000F0050B800000000FFD0500578563412C700E00000E0B800000000FFD0B800000000FFD0B800000000FFD09D61#
 mov tmp, param1
 add tmp, 1F
 mov [tmp], CreateFileA
 add tmp, 13
 mov [tmp], CreateFileMappingA
 add tmp, 14
 mov [tmp], MapViewOfFile
 add tmp, 8
 mov [tmp], AttrOffset
 add tmp, 0B
 mov [tmp], UnmapViewOfFile
 add tmp, 7
 mov [tmp], CloseHandle
 add tmp, 7
 mov [tmp], CloseHandle
 mov param2, exeforiat
 len param2
 sub $RESULT, 4
 mov param3, param2, $RESULT
 eval "{param3}_.{ext}"
 add tmp, 8
 mov [tmp], $RESULT
 sub tmp, 1
 bp tmp
 mov tmp, eip
 mov eip, param1
 run
 bc eip
 sto
 mov eip, tmp
 free param1
ret

vpfullaccess:
 alloc 1000
 mov memarea, $RESULT
 gmi eip, MODULEBASE
 mov param1, $RESULT
 gmi eip, MODULESIZE
 mov param2, $RESULT
 exec
  pushad
  pushfd
  push {memarea}
  push 40
  push {param2}
  push {param1}
  call VirtualProtect
  popfd
  popad
 ende
 free memarea
ret

dumpexe:
 gmi eip, MODULEBASE
 mov tmp, $RESULT
 find tmp, #50450000#
 sub $RESULT, tmp
 add tmp, 03C
 mov oldelfanew, [tmp]
 mov [tmp], $RESULT
 eval "{basepath}_dump.{ext}"
 mov exeforiat, $RESULT
 dpe $RESULT, eip
 mov [tmp], oldelfanew
 log "Process dumped to:"
 log $RESULT, ""
ret

minimizeexe:
 cmp importdestruction, 0   // If ImpDes was enabled the exe can't be minimized
 jne min_checkredirmethod
ret
min_checkredirmethod:
 cmp splicesdump_method, 0
 je check_if_splices    // If user redirected the CS we need to know whether if they really exist
 jmp check_if_dll       // Otherwise they are in an external section, so we don't really have to care about them
check_if_splices:
 cmp splicesaddress, 0  // If CS are present and they have been redirected the exe can't be minimized
 je check_if_dll
ret
check_if_dll:
 cmp IS_DLL, 0  // Don't minimize the module if it is a DLL
 je user_choice
ret
user_choice:
 cmp minimizeexe_userchoice, 0  // 1 = Minimize (Default); 0 = Don't Minimize
 jne minimize
ret
 minimize:
 alloc 1000
 mov memarea, $RESULT
 mov [memarea], exepath
 mov param1, memarea    // *MSNameOfProtected
 eval "{basepath}_dump.{ext}"
 mov tmp, memarea
 add tmp, 300
 mov param2, tmp    // *MSNameOfDumped
 mov [param2], $RESULT
 mov tmp, memarea
 add tmp, 600
 mov param3, tmp
 exec
  pushad
  pushfd
  push {param3}
  push {param2}
  push {param1}
  call RebuildSectionsFromArmadillo@12
  popfd
  popad
 ende
 eval "{basepath}_dump_OptimizedSize.exe"
 mov exeforiat, $RESULT
 gstr param3
 log $RESULT, "ARImpRec: "
 free memarea
ret

iatrebuild:
 alloc 1000
 mov memarea, $RESULT
 gpi PROCESSID
 mov pid, $RESULT
 mov [memarea], exeforiat
 mov param1, memarea
 mov param2, memarea
 add param2, 200
 mov tmp, memarea
 add tmp, 204
 mov param3, memarea
 add param3, 300
 exec
  pushad
  pushfd
  push {param3}
  push {tmp}
  push {param2}
  push 1
  push {eip}
  push {param1}
  push {pid}
  call SearchAndRebuildImportsIATOptimized@28
  popfd
  popad
 ende
 gstr param3
 log $RESULT, "ARImpRec: "
 free memarea
ret

emitlog:
 log "-----------------------------------------------------------"
 log "                         Log Time!                         "
 log "-----------------------------------------------------------"
 eval "OEP:  {eip}"
 log $RESULT, ""
 log ""

 call AddrBubblesort
 log "Sections to keep:"
 mov tmp, SectionsTable
 UsefulSectionsPrint:
  cmp RealSectionsNumber, 0
  je EndUsefulPrint
  mov param1, [tmp]
  gmemi param1, MEMORYBASE
  eval "VA: {$RESULT}"
  log $RESULT, ""
  add tmp, 4
  dec RealSectionsNumber
 jmp UsefulSectionsPrint

 EndUsefulPrint:
 free SectionsTable
 log ""

 ifeq passwordused, 0
  log "Password Protection used: No"
 else
  log "Password Protection used: Yes"
  ifeq passbypass_method, 0
   log "Used Fast Password Bypass"
  else
   eval "Correct PW JAMCRC: {CorrectJAMCRC}"
   log $RESULT, ""
   eval "Correct PW CRC32:  {CorrectCRC32}"
   log $RESULT, ""
  endif
 endif
 log ""

 ifeq splicessize, 0
  log "CodeSplices used: No"
 else
  log "CodeSplices used: Yes"
  mov tmp, splicesaddress
  sub tmp, modulebase
  eval "VA:   {splicesaddress}"
  log $RESULT, ""
  eval "RVA:  {tmp}"
  log $RESULT, ""
  eval "Size: {splicessize}"
  log $RESULT, ""
  log ""
  ifeq splicesdump_method, 0
   log "CodeSplices redirected to the .pdata section"
  else
   log "The CodeSplices have not been redirected. Remember to add"
   log "the dumped memory region to the unpacked file"
  endif
 endif
 log "-----------------------------------------------------------"
ret

AddrBubblesort:
AB_OuterLoop:
 mov param1, SectionsTable
 mov param2, RealSectionsNumber
 dec param2
 mov param3, 0
 mov counter, 0
 AB_InnerLoop:
  ifa [param1], [param1+4]
   xchg [param1], [param1+4]
   mov param3, 1
  endif
  add param1, 4
  inc counter
  cmp counter, param2
  jb AB_InnerLoop
 cmp param3, 1
 je AB_OuterLoop
ret

PWLogNBypass:
 findop eip, #C2#
 bp $RESULT
 run
 bc eip
 mov param1, eax
 alloc 1000
 mov tmp, $RESULT
 exec
  pushad
  pushfd
  push 1000
  push {tmp}
  push {param1}
  call {GetWindowTextA}
  popfd
  popad
 ende

 gstr tmp
 free tmp
 scmp $RESULT, "Enter Password"
 ifneq
  ret
 endif

 bphwc CreateDialogIndirectParamA
 bphwc CreateDialogIndirectParamW
 
 mov passwordused, 1

 ifeq passbypass_method, 0
  alloc 1000
  mov memarea, $RESULT
  mov [memarea], #609CBE00000000BF000000006A0168145B3E0156FFD76A0168265B3E0156FFD79D61905F456E644469616C6F67526574436F6465005F456E644469616C6F6700#
  mov [memarea+3], param1
  mov [memarea+8], SetPropA
  mov [memarea+F], memarea+23
  mov [memarea+19], memarea+35
  mov tmp, eip
  mov eip, memarea
  bp memarea+22
  run
  bc eip
  mov eip, tmp
  free memarea
  run
  ret
 endif
 
 mov tmp, [esp+10]
 bp tmp
 erun
 bc tmp

 bp GetWindowTextA
 erun
 bc GetWindowTextA
 mov tmp, [esp]
 bp tmp
 run
 bc eip
 findop eip, #8B??????????#
 findop $RESULT, #E8????????#
 mov tmp, $RESULT
 bp tmp
 run
 bc eip
 sti
 findop eip, #0F94C?#
 mov tmp, $RESULT
 sub tmp, 6
 bp tmp
 add $RESULT, 3
 findop $RESULT, #0F94C?#
 mov tmp, $RESULT
 sub tmp, 6
 bp tmp

 erun
 bc
 mov tmp, [eip], 1
 mov [eip], #8B#
 sti
 sub eip, 6
 mov [eip], tmp, 1
 mov tmp, eax
 mov CorrectJAMCRC, tmp
 eval "Correct PW JAMCRC: {CorrectJAMCRC}"
 log $RESULT, ""
 xor tmp, FFFFFFFF
 mov CorrectCRC32, tmp
 eval "Correct PW CRC32:  {CorrectCRC32}"
 log $RESULT, ""
ret