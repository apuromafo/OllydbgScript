//private
// *PRIVATE*
//Created by Apuromafo, fixed & rescripted by a friend
//v0.2Beta, may contain a few bugs :)
//Dumps the Certificates in .cert files 
//Fixed a huge bug with lvl10 certs...
//Last edit: SEP-30-2011

var OpenMutexA
var CreateMutexA
var GetModuleHandleA
var VirtualAlloc
var search
var cert_number
var sub_number
var cert_raw
var single_length
var cert2
var checksum
var y_length
var temp1
var temp2
var temp3
var temp4
var temp5

log ""
log "---ARMA CERTIFICATES OF:------"
gpi PROCESSNAME
log $RESULT, ""
log "---BEGIN OF CERTIFICATES------"

 
loop2: //certificate loop
    inc cert_number //A counter for the number of certificates
    findmem #002D2A00# ,search //find some signature
    cmp $RESULT,70000000 //check if its not biggen then 0x70000000
    jae done

    mov cert, $RESULT+5 //Thats the start of the raw certificate data
    find cert, #0000??# //Look for at least two terminating zeros
    mov len, $RESULT //Move the result in a variable (to determine certificate length)
    sub len, cert //Substract cert from len

    mov total_length, len
    mov temp1, [cert+1], 1
    add temp1, 6

    test len, len //compare len with 0 (if there is no certificate)
    je next //Go to the next certificate (skip invalid certs)
    cmp len, 0A //The length of a signed certificate is always more then 10!
    ja loop3 //We dump the cert in a file if our cert is signed!
    log "Unsigned certificates are currently not supported"
    jmp next //Skip this certificate...

loop3:
    inc sub_number
    //sub total_length, temp1
    //cmp 0, total_length
    //jbe next

dump: //Dump data to the harddisc
    gpi PROCESSNAME //Get the process name (just filename without '.exe')
    eval "/{$RESULT}_Certificate{cert_number}_{sub_number}[{cert}]LENGTH_{temp1}.mem"
    dm  cert, temp1, $RESULT //Dump certificate in file...

/*
    mov cert_raw, [cert], temp1 //Copy the raw certificate data in a buffer (for logging)
    log "BEGIN OF RAW DATA"
    logbuf cert_raw //Log that buffer...
    log "END OF RAW DATA"
    log ""
*/

getlevel: //Get the level of the current certificate
    mov level, [cert], 1 //Copy the level-byte in a buffer
    cmp 03, level //Compare with 3
    jae signed_v2 //Jump if not bigger or equal to signed_v2
    cmp 12, level //Compare with 12
    jae signed_v3 //Jump if not bigger or equal to signed_v3
    cmp 1C, level //Compare with 1C
    jae short_v3  //Jump if not bigger or equal to short_v3
    cmp 1D, level //Compare with 1D (ShortV3 lvl10)
    je lvl10      //Jump if equal to lvl10
    eval "Level {level}h is currently not supported!" //If the level is different (doesn't exsist today)
    log $RESULT, "" //Log an error...
    jmp next_b //Skip this certificate...

signed_v2: //Print the real keytype + level
    inc level
    eval "Signed V2 lvl{level}:"
    jmp checksum

signed_v3: //Print the real keytype + level
    sub level, 9
    eval "Signed V3 lvl{level}:"
    jmp checksum

short_v3: //Print the real keytype + level
    sub level, 13
    eval "Short V3 lvl{level}:"
    jmp checksum

lvl10: //lvl10 is not supported!
    log "Short V3 lvl10 is currently not supported!"
    add cert, 56
    jmp loop3 //Skip this certi

checksum: //Get the checksum
    log $RESULT,"" //Log key type + level
    mov checksum, [cert+2], 4
    eval "Chk : {checksum}"
    log $RESULT, ""

find_Y: //The length of Y is different for every key level (KeyTypes do NOT matter)
    mov y_length, level
    add y_length, 3 //1 DWORD = lvl1, 1 DWORD+1 = lvl2, 1DWORD+2=lvl3, etc.
    cmp y_length, 4
    je lvl1
    cmp y_length, 5
    je lvl2
    cmp y_length, 6
    je lvl3
    cmp y_length, 7
    je lvl4
    cmp y_length, 8
    je lvl5
    cmp y_length, 9
    je lvl6
    cmp y_length, 0A
    je lvl7
    cmp y_length, 0B
    je lvl8
    cmp y_length, 0C
    je lvl9
    log "  Y : INCOMPATIBLE!" //If the length of Y is bigger then 13d (0C) Armadillo is updated :)
    jmp next_b //Skip the current certificate if there is an incompatible Y

//Explaination of lvl?:
//Y can be maximal 3 DWORDs (lvl9). The length of Y is different for EVERY KeyLEVEL (not type)
//Y is stored in the 'correct' order (12 34 56 78 instead of 78 56 34 12) but as ODBGScript 'corrects'
//the dumped value we NEED to 'correct' it before it's 'corrected' by ODBGScript (If var=12 34 56 78
//and you use EVAL on it, it dumps "78563412")
//
//The problem with reversing 3 bytes is that there are zeros added. We fix this by shifting the variable
//1 BYTE (8Bits) or 2BYTES (16Bits) to the left because Y will be invalid if there are 00s added.
//(1000 is not the same as 0010 right??)

lvl1:
    mov temp1, [cert+6], 4
    rev temp1
    mov temp1, $RESULT
    eval "Y   : {temp1}"
    jmp log_y

lvl2:
    mov temp1, [cert+6], 4
    rev temp1
    mov temp1, $RESULT
    mov temp2, [cert+0A], 1
    eval "Y   : {temp1}{temp2}"
    jmp log_y

lvl3:
    mov temp1, [cert+6], 4
    rev temp1
    mov temp1, $RESULT
    mov temp2, [cert+0A], 2
    rev temp2
    shr $RESULT, 10
    mov temp2, $RESULT
    eval "Y   : {temp1}{temp2}"
    jmp log_y

lvl4:
    mov temp1, [cert+6], 4
    rev temp1
    mov temp1, $RESULT
    mov temp2, [cert+0A], 3
    rev temp2
    shr $RESULT, 8
    mov temp2, $RESULT
    eval "Y   : {temp1}{temp2}"
    jmp log_y

lvl5:
    mov temp1, [cert+6], 4
    rev temp1
    mov temp1, $RESULT
    mov temp2, [cert+0A], 4
    rev temp2
    mov temp2, $RESULT
    eval "Y   : {temp1}{temp2}"
    jmp log_y

lvl6:
    mov temp1, [cert+6], 4
    rev temp1
    mov temp1, $RESULT
    mov temp2, [cert+0A], 4
    rev temp2
    mov temp2, $RESULT
    mov temp3, [cert+0E], 1
    eval "Y   : {temp1}{temp2}{temp3}"
    jmp log_y

lvl7:
    mov temp1, [cert+6], 4
    rev temp1
    mov temp1, $RESULT
    mov temp2, [cert+0A], 4
    rev temp2
    mov temp2, $RESULT
    mov temp3, [cert+0E], 2
    rev temp3
    shr $RESULT, 10
    mov temp3, $RESULT, 2
    eval "Y   : {temp1}{temp2}{temp3}"
    jmp log_y

lvl8:
    mov temp1, [cert+6], 4
    rev temp1
    mov temp1, $RESULT
    mov temp2, [cert+0A], 4
    rev temp2
    mov temp2, $RESULT
    mov temp3, [cert+0E], 3
    rev temp3
    shr $RESULT, 8
    mov temp3, $RESULT
    eval "Y   : {temp1}{temp2}{temp3}"
    jmp log_y

lvl9:
    mov temp1, [cert+6], 4
    rev temp1
    mov temp1, $RESULT
    mov temp2, [cert+0A], 4
    rev temp2
    mov temp2, $RESULT
    mov temp3, [cert+0E], 4
    rev temp3
    mov temp3, $RESULT
    eval "Y   : {temp1}{temp2}{temp3}"
    jmp log_y

log_y:
    log $RESULT, ""
    log "------------------------------"

next_b:
    mov temp1, [cert+1], 1
    add temp1, 6
    mov temp2, cert
    add temp2, temp1
    mov temp3, [temp2], 1
    test temp3,temp3
    je next
    add cert,temp1
    jmp loop3

next:
    log ""
    log "NEXT RAW CERTIFICATE"
    log ""
    mov search,cert
    jmp loop2

done:
    log "-----END OF CERTIFICATES------"
    log ""
    ret
